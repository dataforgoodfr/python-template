#!/usr/bin/env bash
set -Eeuo pipefail

trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
  cat <<EOF
USAGE ${0} [-v] [-h]

This is a description of the script.
Honestly, write whatever you want.

Supported parameters :
-h, --help : display this message
-v, --verbose : enable enhanced logging
EOF
  exit 1
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
  #exit 0
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    # shellcheck disable=SC2034
    NOCOLOR='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    # shellcheck disable=SC2034
    NOCOLOR='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

info() {
  echo -e "${GREEN}$*${NOCOLOR}"
}

error() {
  echo -e "${RED}$*${NOCOLOR}"
}

debug() {
  if [ "$DEBUG" == 'true' ]; then
    echo -e "$1"
  fi
}

# Function to check if a command is available
command_exists() {
    command -v "$1" &> /dev/null
}

parse_params() {
  if [ $# -gt 2 ]; then
    echo "Too many parameters provided"
    usage
  fi

  # Sane defaults
  DEBUG="false"
  RUN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

  while :; do
    case "${1-}" in
    -h | --help)
      usage
      ;;
    -v | --verbose)
      DEBUG="true"
      ;;
    --dummy-flag*)
      DUMMY_FLAG="true"
      ;;
    --dummy-param=*)
      DUMMY_PARAM="${1#*=}"
      ;;
    -?*)
      echo "Unknown option: $1"
      usage
      ;;
    *)
      break
      ;;
    esac
    shift
  done

  return 0
}

setup_colors
parse_params "$@"




echo -n "Ready to rumble."
